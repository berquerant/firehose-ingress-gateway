// Code generated by "goconfig -field QueueName string|ConsumerName string|PrefetchCount int -prefix Consumer -option -output conn_consumer_config_generated.go"; DO NOT EDIT.

package amqp

type ConsumerConfigItem[T any] struct {
	modified     bool
	value        T
	defaultValue T
}

func (s *ConsumerConfigItem[T]) Set(value T) {
	s.modified = true
	s.value = value
}
func (s *ConsumerConfigItem[T]) Get() T {
	if s.modified {
		return s.value
	}
	return s.defaultValue
}
func (s *ConsumerConfigItem[T]) Default() T {
	return s.defaultValue
}
func (s *ConsumerConfigItem[T]) IsModified() bool {
	return s.modified
}
func NewConsumerConfigItem[T any](defaultValue T) *ConsumerConfigItem[T] {
	return &ConsumerConfigItem[T]{
		defaultValue: defaultValue,
	}
}

type ConsumerConfig struct {
	QueueName     *ConsumerConfigItem[string]
	ConsumerName  *ConsumerConfigItem[string]
	PrefetchCount *ConsumerConfigItem[int]
}
type ConsumerConfigBuilder struct {
	queueName     string
	consumerName  string
	prefetchCount int
}

func (s *ConsumerConfigBuilder) QueueName(v string) *ConsumerConfigBuilder {
	s.queueName = v
	return s
}
func (s *ConsumerConfigBuilder) ConsumerName(v string) *ConsumerConfigBuilder {
	s.consumerName = v
	return s
}
func (s *ConsumerConfigBuilder) PrefetchCount(v int) *ConsumerConfigBuilder {
	s.prefetchCount = v
	return s
}
func (s *ConsumerConfigBuilder) Build() *ConsumerConfig {
	return &ConsumerConfig{
		QueueName:     NewConsumerConfigItem(s.queueName),
		ConsumerName:  NewConsumerConfigItem(s.consumerName),
		PrefetchCount: NewConsumerConfigItem(s.prefetchCount),
	}
}

func NewConsumerConfigBuilder() *ConsumerConfigBuilder { return &ConsumerConfigBuilder{} }
func (s *ConsumerConfig) Apply(opt ...ConsumerConfigOption) {
	for _, x := range opt {
		x(s)
	}
}

type ConsumerConfigOption func(*ConsumerConfig)

func WithQueueName(v string) ConsumerConfigOption {
	return func(c *ConsumerConfig) {
		c.QueueName.Set(v)
	}
}
func WithConsumerName(v string) ConsumerConfigOption {
	return func(c *ConsumerConfig) {
		c.ConsumerName.Set(v)
	}
}
func WithPrefetchCount(v int) ConsumerConfigOption {
	return func(c *ConsumerConfig) {
		c.PrefetchCount.Set(v)
	}
}
